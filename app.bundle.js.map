{"version":3,"file":"app.bundle.js","mappings":"mBACA,IAAIA,EAAsB,CAAC,ECD3BA,EAAoBC,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAChB,CAAE,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,MACxC,CACA,CAPuB,G,MCAxB,IAAIC,EACAP,EAAoBC,EAAEO,gBAAeD,EAAYP,EAAoBC,EAAEQ,SAAW,IACtF,IAAIC,EAAWV,EAAoBC,EAAES,SACrC,IAAKH,GAAaG,IACbA,EAASC,gBACZJ,EAAYG,EAASC,cAAcC,MAC/BL,GAAW,CACf,IAAIM,EAAUH,EAASI,qBAAqB,UAC5C,GAAGD,EAAQE,OAEV,IADA,IAAIC,EAAIH,EAAQE,OAAS,EAClBC,GAAK,IAAMT,GAAWA,EAAYM,EAAQG,KAAKJ,GAExD,CAID,IAAKL,EAAW,MAAM,IAAIU,MAAM,yDAChCV,EAAYA,EAAUW,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KACpFlB,EAAoBmB,EAAIZ,C,KCjBxB,MAAMa,EAAc,CAClB,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,GAAI,GACN,EAAE,GAAI,GACN,EAAE,EAAG,GACL,EAAE,EAAG,IAKQ,SAASC,IAA6C,IAA/BC,EAAIC,UAAAR,OAAA,QAAAS,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAAGE,EAAKF,UAAAR,OAAA,QAAAS,IAAAD,UAAA,GAAAA,UAAA,GAAGH,EACtD,MAAMM,EAAQ,CAAC,EACf,IAAK,IAAIV,EAAI,EAAGA,GAAKM,EAAMN,GAAK,EAC9B,IAAK,IAAIW,EAAI,EAAGA,GAAKL,EAAMK,GAAK,EAC9BD,EAAO,GAAEV,KAAKW,KAAOC,EAAmBZ,EAAGW,EAAGL,EAAMG,GAIxD,OAAOC,CACT,CAIA,SAASE,EAAmBZ,EAAGW,EAAGL,EAAMG,GACtC,MAAMI,EAAY,GAelB,OAbAJ,EAAMK,SAASC,IACb,MAAMC,EAAahB,EAAIe,EAAK,GACtBE,EAAaN,EAAII,EAAK,GAE1BC,GAAc,GACdA,GAAcV,GACdW,GAAc,GACdA,GAAcX,GAEdO,EAAUK,KAAM,GAAEF,KAAcC,IAClC,IAGKJ,CACT,CC5Ce,MAAMM,EACnBC,WAAAA,GACEjC,KAAKkC,KAAO,KACZlC,KAAKmC,KAAO,IACd,CAGAC,OAAAA,CAAQC,GACN,MAAO,CAAEA,QAAOC,KADClB,UAAAR,OAAA,QAAAS,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAEtB,CAGAmB,OAAAA,CAAQF,GACN,OAAKrC,KAAKkC,MAKVlC,KAAKmC,KAAKG,KAAOtC,KAAKoC,QAAQC,GAC9BrC,KAAKmC,KAAOnC,KAAKmC,KAAKG,KACftC,KAAKkC,OANVlC,KAAKkC,KAAOlC,KAAKoC,QAAQC,GACzBrC,KAAKmC,KAAOnC,KAAKkC,KACVlC,KAAKkC,KAKhB,CAGAM,OAAAA,GACE,GAAIxC,KAAKyC,UAEP,OADAC,QAAQC,IAAI,sCACL,KAET,MAAMC,EAAgB5C,KAAKkC,KAAKG,MAOhC,OALArC,KAAKkC,KAAOlC,KAAKkC,KAAKI,KACjBtC,KAAKkC,OACRlC,KAAKmC,KAAO,MAGPS,CACT,CAGAH,OAAAA,GACE,OAAqB,OAAdzC,KAAKkC,IACd,ECvCa,SAASW,EAAgBC,EAAUC,EAAaC,GAC7D,MAAMC,EAkBR,SAAoBH,EAAUI,GAC5B,MAAMD,EAAW,CAAC,EAElBE,OAAOC,KAAKN,GAAUnB,SAAS0B,IAC7BJ,EAASI,GAAO,CACdC,SAAU,KACVC,YAAa,KACd,IAGHN,EAASC,GAAcI,SAAW,EAElC,MAAME,EAAQ,IAAIxB,EAGlB,IAFAwB,EAAMjB,QAAQW,IAENM,EAAMf,WAAW,CACvB,MAAMgB,EAAgBD,EAAMhB,UACHM,EAASW,GAEjB9B,SAAS+B,IACa,OAAjCT,EAASS,GAAWJ,WACtBL,EAASS,GAAWH,YAAcE,EAClCR,EAASS,GAAWJ,SAAWL,EAASQ,GAAeH,SAAW,EAElEE,EAAMjB,QAAQmB,GAChB,GAEJ,CAEA,OAAOT,CACT,CAhDmBU,CAAWb,EAAUE,GAChCY,EAAW,CAACb,IACZ,SAAEO,GAAaL,EAASF,GAE9B,IAAIc,EAAYd,EAChB,KAAOc,IAAcb,GAAaa,GAChCA,EAAYZ,EAASY,GAAWN,YAChCK,EAAS7B,KAAK8B,GAEhB,OAAKA,EAIE,CAAED,WAAUN,aAHjBZ,QAAQC,IAAI,yBACL,KAGX,CClBA,MAAMmB,EAAS,CAAC,EAGhB,SAASC,EAAGC,EAAWC,GACrBH,EAAOE,GAAaF,EAAOE,IAAc,GACzCF,EAAOE,GAAWjC,KAAKkC,EACzB,CAeA,SAASC,EAAKF,EAAWG,GACnBL,EAAOE,IACTF,EAAOE,GAAWrC,SAASsC,IACzBA,EAAGE,EAAK,GAGd,CCzBkB,MAEhB,MAAMC,EAAQ,CACZC,UAAW,MAGPC,EAAe/D,SAASgE,iBAAiB,uBACzCC,EAAcjE,SAASkE,cAAc,oBAY3C,SAASC,EAAWxE,GAClBkE,EAAMC,UAAYM,SAASzE,EAAE0E,OAAOvC,MAAO,IAC3CwC,EAAY,gBAAiBT,EAAMC,WACnCG,EAAYM,UAAW,CACzB,CAbA,IAAIR,GAAc3C,SAASoD,IACzBA,EAAMC,iBAAiB,SAAUN,EAAW,IAE9CF,EAAYQ,iBAAiB,SAY7B,WACEH,EAAY,gBAAiBT,EAAMC,WACnCG,EAAYM,UAAW,CACzB,IAZAD,EAAU,gBAcV,WACEL,EAAYM,UAAW,CACzB,GACD,EAjCiB,GAAlB,M,iCCUMG,GCPU,MAEd,MAAMb,EAAQ,CACZc,WAAY,KACZC,eAAe,EACfpC,YAAa,KACbC,UAAW,KACXoC,aAAc,IAIVC,EAAa9E,SAASkE,cAAc,gBA6C1C,SAASa,EAAmBpF,GACrBkE,EAAMrB,YAGT7C,EAAE0E,OAAOW,aAAa,gBAAkBnB,EAAMrB,aAC9C7C,EAAE0E,OAAOW,aAAa,gBAAkBnB,EAAMpB,WAqBlD,SAAsB9C,GACpBkE,EAAMpB,UAAY9C,EAAE0E,OAAOW,aAAa,cAExC,MAAMH,EAAevC,EACnBuB,EAAMc,WACNd,EAAMrB,YACNqB,EAAMpB,WAGJoB,EAAMgB,cAQZ,WACE,IAAK,IAAIvE,EAAI,EAAGA,GAAKuD,EAAMgB,aAAaxE,OAAS,EAAGC,GAAK,EAAG,CAC1D,MAAM2E,EAAcpB,EAAMgB,aAAavE,GACjC4E,EAAclF,SAASkE,cAC1B,0BAAyBe,OAGxB3E,IAAMuD,EAAMgB,aAAaxE,OAAS,EACpC6E,EAAYC,UAAUC,OAAO,QAE7BF,EAAYC,UAAUC,OAAO,QAG/BF,EAAYG,UAAY,EAC1B,CACF,CAtBIC,GAwBJ,SAAoBT,GAClBhB,EAAMgB,aAAeA,EAAaxB,SAElC,IAAK,IAAI/C,EAAI,EAAGA,GAAKuD,EAAMgB,aAAaxE,OAAS,EAAGC,GAAK,EAAG,CAC1D,MAAM2E,EAAcpB,EAAMgB,aAAavE,GACjC4E,EAAclF,SAASkE,cAC1B,0BAAyBe,OAGxB3E,IAAMuD,EAAMgB,aAAaxE,OAAS,EACpC6E,EAAYC,UAAUI,IAAI,QAE1BL,EAAYC,UAAUI,IAAI,QAG5BL,EAAYG,UAAY/E,CAC1B,CACF,CAtCEkF,CAAWX,GACXP,EAAY,iBAAkBT,EAAMgB,aAAaxE,OAAS,EAC5D,CAlCIoF,CAAa9F,GAKjB,SAAqBA,GAMrB,IAAsB+F,EALpB7B,EAAMrB,YAAc7C,EAAE0E,OAAOW,aAAa,eAKtBU,EAJP/F,EAAE0E,QAKPc,UAAUI,IAAI,YACtBG,EAAQC,MAAMC,gBAAmB,OAAMC,KAEvCf,EAAWa,MAAMG,gBAAkB,UAPnCxB,EAAY,eACd,CAdIyB,CAAYpG,EAOhB,CAnDA2E,EAAU,iBAGV,SAAuBR,GACjBgB,EAAWkB,mBACblB,EAAWmB,YAAYnB,EAAWkB,mBAGpC,MAAMtB,EAAQ1E,SAASkG,cAAc,OACrCxB,EAAMS,UAAUI,IAAI,SACpBb,EAAMS,UAAUI,IAAI,QAEpBT,EAAWa,MAAMQ,YAAY,kBAAmBrC,GAChDgB,EAAWa,MAAMG,gBAAkB,UAEnC,IAAK,IAAIxF,EAAIwD,EAAWxD,GAAK,EAAGA,GAAK,EAAG,CACtC,IAAK,IAAIW,EAAI,EAAGA,GAAK6C,EAAW7C,GAAK,EAAG,CACtC,MAAMmF,EAASpG,SAASkG,cAAc,OACtCE,EAAOjB,UAAUI,KAoBrB1B,EAAMe,eAAiBf,EAAMe,cACtBf,EAAMe,cAAgB,QAAU,SApBnCwB,EAAOC,aAAa,aAAe,GAAEpF,KAAKX,KAC1C8F,EAAO3B,iBAAiB,QAASM,GAEjCL,EAAM4B,YAAYF,EACpB,CACAvC,EAAMe,eAAiBf,EAAMe,aAC/B,CAEAE,EAAWwB,YAAY5B,GAIvBb,EAAMc,WAAahE,EAAcmD,GACjCD,EAAMrB,YAAc,KACpBqB,EAAMpB,UAAY,KAClBoB,EAAMgB,aAAe,IACvB,GAqFD,EAtIe,GCHE,MAEhB,MAAM0B,EAAWvG,SAASkE,cAAc,mBAGxCI,EAAU,iBAKV,WACE,IAAIiC,EAASC,UAAUpF,SAASqF,IAC9BF,EAASN,YAAYQ,EAAM,IAG7B,MAAMC,EAAO1G,SAASkG,cAAc,KACpCQ,EAAKrB,UAAY,wCAEjBkB,EAASD,YAAYI,EACvB,IAbApC,EAAU,gBAeV,WACE,IAAIiC,EAASC,UAAUpF,SAASqF,IAC9BF,EAASN,YAAYQ,EAAM,IAG7B,MAAMC,EAAO1G,SAASkG,cAAc,KACpCQ,EAAKrB,UAAY,mDAEjBkB,EAASD,YAAYI,EACvB,IAvBApC,EAAU,kBAyBV,SAA+BqC,GAC7B,IAAIJ,EAASC,UAAUpF,SAASqF,IAC9BF,EAASN,YAAYQ,EAAM,IAG7B,MAAMG,EAASD,EAAa,EAAI,IAAM,GAEhCE,EAAQ7G,SAASkG,cAAc,KAC/BY,EAAQ9G,SAASkG,cAAc,KACrCW,EAAMxB,UAAa,qBAAoBsB,SAAkBC,6CACzDE,EAAMzB,UACJ,yEAEFkB,EAASD,YAAYO,GACrBN,EAASD,YAAYQ,EACvB,GACD,EAhDiB,GFUJ,IGTC,MACbpF,WAAAA,GAAsB,IAAVd,EAAIC,UAAAR,OAAA,QAAAS,IAAAD,UAAA,GAAAA,UAAA,GAAG,EACjBpB,KAAKuB,MAAQvB,MAAK,EAAUmB,EAC9B,CAEA,GAAUA,GACR,OAAOD,EAAcC,EACvB,CAEAmG,QAAAA,CAASvE,EAAaC,GACpB,OAAOH,EAAgB7C,KAAKuB,MAAOwB,EAAaC,EAClD,IHDFN,QAAQC,IAAIsC,EAAMqC,SAAS,MAAO,O","sources":["webpack://chess-algorithm/webpack/bootstrap","webpack://chess-algorithm/webpack/runtime/global","webpack://chess-algorithm/webpack/runtime/publicPath","webpack://chess-algorithm/./src/assets/graph.js","webpack://chess-algorithm/./src/assets/queue.js","webpack://chess-algorithm/./src/assets/bfs.js","webpack://chess-algorithm/./src/assets/events.js","webpack://chess-algorithm/./src/assets/optionsUI.js","webpack://chess-algorithm/./src/index.js","webpack://chess-algorithm/./src/assets/boardUI.js","webpack://chess-algorithm/./src/assets/messageUI.js","webpack://chess-algorithm/./src/assets/Board.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// all knight moves expressed as [x, y] transformations\nconst knightMoves = [\n  [1, 2],\n  [2, 1],\n  [2, -1],\n  [1, -2],\n  [-1, -2],\n  [-2, -1],\n  [-2, 1],\n  [-1, 2],\n];\n\n// return an adjacency graph where each key is a square on the board, and\n// each value is an array of square keys\nexport default function getBoardGraph(size = 8, moves = knightMoves) {\n  const graph = {};\n  for (let i = 1; i <= size; i += 1) {\n    for (let j = 1; j <= size; j += 1) {\n      graph[`${i},${j}`] = getSquareAdjacents(i, j, size, moves);\n    }\n  }\n\n  return graph;\n}\n\n// fill in adjacency array for each square created by getBoardGraph() by\n// evaluating if each piece move is valid\nfunction getSquareAdjacents(i, j, size, moves) {\n  const adjacents = [];\n\n  moves.forEach((move) => {\n    const iTransform = i + move[0];\n    const jTransform = j + move[1];\n    if (\n      iTransform >= 1 &&\n      iTransform <= size &&\n      jTransform >= 1 &&\n      jTransform <= size\n    ) {\n      adjacents.push(`${iTransform},${jTransform}`);\n    }\n  });\n\n  return adjacents;\n}\n","export default class Queue {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n  }\n\n  // create new nodes\n  newNode(value, next = null) {\n    return { value, next };\n  }\n\n  // add node to back of queue\n  enqueue(value) {\n    if (!this.head) {\n      this.head = this.newNode(value);\n      this.tail = this.head;\n      return this.head;\n    }\n    this.tail.next = this.newNode(value);\n    this.tail = this.tail.next;\n    return this.head;\n  }\n\n  // remove and return node from front of queue\n  dequeue() {\n    if (this.isEmpty()) {\n      console.log('queue is empty, nothing to dequeue');\n      return null;\n    }\n    const dequeuedValue = this.head.value;\n\n    this.head = this.head.next;\n    if (!this.head) {\n      this.tail = null;\n    }\n\n    return dequeuedValue;\n  }\n\n  // check if queue is empty\n  isEmpty() {\n    return this.head === null;\n  }\n}\n","import Queue from './queue';\n\n// return shortest path of vertices from start to finish, if it exists\nexport default function getShortestPath(graphObj, startVertex, endVertex) {\n  const pathData = getPathBFS(graphObj, endVertex);\n  const movesArr = [startVertex];\n  const { distance } = pathData[startVertex];\n\n  let tmpVertex = startVertex;\n  while (tmpVertex !== endVertex && tmpVertex) {\n    tmpVertex = pathData[tmpVertex].predecessor;\n    movesArr.push(tmpVertex);\n  }\n  if (!tmpVertex) {\n    console.log('no path to end vertex');\n    return null;\n  }\n  return { movesArr, distance };\n}\n\n// create an object whose keys are each vertex and values are a data obj\n// that gives distance and predecessor\nfunction getPathBFS(graphObj, sourceVertex) {\n  const pathData = {};\n\n  Object.keys(graphObj).forEach((key) => {\n    pathData[key] = {\n      distance: null,\n      predecessor: null,\n    };\n  });\n\n  pathData[sourceVertex].distance = 0;\n\n  const queue = new Queue();\n  queue.enqueue(sourceVertex);\n\n  while (!queue.isEmpty()) {\n    const currentVertex = queue.dequeue();\n    const adjacentVertices = graphObj[currentVertex];\n\n    adjacentVertices.forEach((adjVertex) => {\n      if (pathData[adjVertex].distance === null) {\n        pathData[adjVertex].predecessor = currentVertex;\n        pathData[adjVertex].distance = pathData[currentVertex].distance + 1;\n\n        queue.enqueue(adjVertex);\n      }\n    });\n  }\n\n  return pathData;\n}\n","const events = {};\n\n// create a new function for a new or existing event name (doesn’t check duplicates)\nfunction on(eventName, fn) {\n  events[eventName] = events[eventName] || [];\n  events[eventName].push(fn);\n}\n\n// remove an event name’s associated function (one instance in this e.g.)\nfunction off(eventName, fn) {\n  if (events[eventName]) {\n    for (let i = 0; i < events[eventName].length; i += 1) {\n      if (events[eventName][i] === fn) {\n        events[eventName].splice(i, 1);\n        break;\n      }\n    }\n  }\n}\n\n// emit a piece of data to all functions on one event name\nfunction emit(eventName, data) {\n  if (events[eventName]) {\n    events[eventName].forEach((fn) => {\n      fn(data);\n    });\n  }\n}\n\nexport { on, off, emit };\n","import * as Events from './events';\n\nconst OptionsUI = (() => {\n  // state\n  const state = {\n    boardSize: null,\n  };\n  // cache dom elements\n  const boardOptions = document.querySelectorAll('.settings>div>input');\n  const resetButton = document.querySelector('.settings>button');\n\n  // bind default events\n  [...boardOptions].forEach((radio) => {\n    radio.addEventListener('change', buildBoard);\n  });\n  resetButton.addEventListener('click', resetBoard);\n\n  // bind custom events\n  Events.on('knightPlaced', enableReset);\n\n  // methods\n  function buildBoard(e) {\n    state.boardSize = parseInt(e.target.value, 10);\n    Events.emit('buildNewBoard', state.boardSize);\n    resetButton.disabled = true;\n  }\n\n  function resetBoard() {\n    Events.emit('buildNewBoard', state.boardSize);\n    resetButton.disabled = true;\n  }\n\n  function enableReset() {\n    resetButton.disabled = false;\n  }\n})();\n\nexport default OptionsUI;\n","// import css\nimport './static/reset.css';\nimport './static/style.css';\n\n// import modules\nimport Board from './assets/Board';\nimport * as Events from './assets/events';\nimport OptionsUI from './assets/optionsUI';\nimport BoardUI from './assets/boardUI';\nimport MessageUI from './assets/messageUI';\n\n// TEST\nconst board = new Board();\nconsole.log(board.getMoves('1,1', '1,2'));\n","import * as Events from './events';\nimport getBoardGraph from './graph';\nimport getShortestPath from './bfs';\nimport Knight from '../static/images/knight.svg';\n\nconst BoardUI = (() => {\n  // state\n  const state = {\n    boardGraph: null,\n    isSquareLight: false,\n    startVertex: null,\n    endVertex: null,\n    shortestPath: [],\n  };\n\n  // cache dom elements\n  const boardFrame = document.querySelector('.board-frame');\n\n  // bind custom events\n  Events.on('buildNewBoard', buildNewBoard);\n\n  // methods\n  function buildNewBoard(boardSize) {\n    if (boardFrame.firstElementChild) {\n      boardFrame.removeChild(boardFrame.firstElementChild);\n    }\n\n    const board = document.createElement('div');\n    board.classList.add('board');\n    board.classList.add('grid');\n\n    boardFrame.style.setProperty('--square-factor', boardSize);\n    boardFrame.style.backgroundColor = '#426160';\n\n    for (let i = boardSize; i >= 1; i -= 1) {\n      for (let j = 1; j <= boardSize; j += 1) {\n        const square = document.createElement('div');\n        square.classList.add(getSquareColour());\n        square.setAttribute('data-index', `${j},${i}`);\n        square.addEventListener('click', squareActionButton);\n\n        board.appendChild(square);\n      }\n      state.isSquareLight = !state.isSquareLight;\n    }\n\n    boardFrame.appendChild(board);\n\n    // use the imported graph utility to get an adjacency list for the board size\n    // reset state properties\n    state.boardGraph = getBoardGraph(boardSize);\n    state.startVertex = null;\n    state.endVertex = null;\n    state.shortestPath = null;\n  }\n\n  function getSquareColour() {\n    state.isSquareLight = !state.isSquareLight;\n    return state.isSquareLight ? 'light' : 'dark';\n  }\n\n  function squareActionButton(e) {\n    if (!state.startVertex) {\n      firstAction(e);\n    } else if (\n      e.target.getAttribute('data-index') !== state.startVertex &&\n      e.target.getAttribute('data-index') !== state.endVertex\n    ) {\n      secondAction(e);\n    }\n  }\n\n  // setting down the knight\n  function firstAction(e) {\n    state.startVertex = e.target.getAttribute('data-index');\n    renderKnight(e.target);\n    Events.emit('knightPlaced');\n  }\n\n  function renderKnight(element) {\n    element.classList.add('knighted');\n    element.style.backgroundImage = `url(${Knight})`;\n\n    boardFrame.style.backgroundColor = '#b76d68';\n  }\n\n  // determining the path to goal\n  function secondAction(e) {\n    state.endVertex = e.target.getAttribute('data-index');\n\n    const shortestPath = getShortestPath(\n      state.boardGraph,\n      state.startVertex,\n      state.endVertex,\n    );\n\n    if (state.shortestPath) {\n      deletePath();\n    }\n\n    renderPath(shortestPath);\n    Events.emit('pathCalculated', state.shortestPath.length - 1);\n  }\n\n  function deletePath() {\n    for (let i = 1; i <= state.shortestPath.length - 1; i += 1) {\n      const vertexIndex = state.shortestPath[i];\n      const pathElement = document.querySelector(\n        `.board>div[data-index=\"${vertexIndex}\"]`,\n      );\n\n      if (i === state.shortestPath.length - 1) {\n        pathElement.classList.remove('goal');\n      } else {\n        pathElement.classList.remove('path');\n      }\n\n      pathElement.innerText = '';\n    }\n  }\n\n  function renderPath(shortestPath) {\n    state.shortestPath = shortestPath.movesArr;\n\n    for (let i = 1; i <= state.shortestPath.length - 1; i += 1) {\n      const vertexIndex = state.shortestPath[i];\n      const pathElement = document.querySelector(\n        `.board>div[data-index=\"${vertexIndex}\"]`,\n      );\n\n      if (i === state.shortestPath.length - 1) {\n        pathElement.classList.add('goal');\n      } else {\n        pathElement.classList.add('path');\n      }\n\n      pathElement.innerText = i;\n    }\n  }\n})();\n\nexport default BoardUI;\n","import * as Events from './events';\n\nconst MessageUI = (() => {\n  // cache dom elements\n  const messages = document.querySelector('.inner-messages');\n\n  // bind custom events\n  Events.on('buildNewBoard', newBoardMessage);\n  Events.on('knightPlaced', knightPlacedMessage);\n  Events.on('pathCalculated', pathCalculatedMessage);\n\n  // methods\n  function newBoardMessage() {\n    [...messages.children].forEach((child) => {\n      messages.removeChild(child);\n    });\n\n    const para = document.createElement('p');\n    para.innerText = 'Place a knight anywhere on the board.';\n\n    messages.appendChild(para);\n  }\n\n  function knightPlacedMessage() {\n    [...messages.children].forEach((child) => {\n      messages.removeChild(child);\n    });\n\n    const para = document.createElement('p');\n    para.innerText = 'Select an endpoint and watch the magic happen...';\n\n    messages.appendChild(para);\n  }\n\n  function pathCalculatedMessage(pathLength) {\n    [...messages.children].forEach((child) => {\n      messages.removeChild(child);\n    });\n\n    const plural = pathLength > 1 ? 's' : '';\n\n    const para1 = document.createElement('p');\n    const para2 = document.createElement('p');\n    para1.innerText = `It takes at least ${pathLength} move${plural} for the knight to get from start to end.`;\n    para2.innerText =\n      'Try a different square, reset the current board or select a new board.';\n\n    messages.appendChild(para1);\n    messages.appendChild(para2);\n  }\n})();\n\nexport default MessageUI;\n","import getBoardGraph from './graph';\nimport getShortestPath from './bfs';\n\nexport default class Board {\n  constructor(size = 8) {\n    this.graph = this.#getGraph(size);\n  }\n\n  #getGraph(size) {\n    return getBoardGraph(size);\n  }\n\n  getMoves(startVertex, endVertex) {\n    return getShortestPath(this.graph, startVertex, endVertex);\n  }\n}\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","knightMoves","getBoardGraph","size","arguments","undefined","moves","graph","j","getSquareAdjacents","adjacents","forEach","move","iTransform","jTransform","push","Queue","constructor","head","tail","newNode","value","next","enqueue","dequeue","isEmpty","console","log","dequeuedValue","getShortestPath","graphObj","startVertex","endVertex","pathData","sourceVertex","Object","keys","key","distance","predecessor","queue","currentVertex","adjVertex","getPathBFS","movesArr","tmpVertex","events","on","eventName","fn","emit","data","state","boardSize","boardOptions","querySelectorAll","resetButton","querySelector","buildBoard","parseInt","target","Events","disabled","radio","addEventListener","board","boardGraph","isSquareLight","shortestPath","boardFrame","squareActionButton","getAttribute","vertexIndex","pathElement","classList","remove","innerText","deletePath","add","renderPath","secondAction","element","style","backgroundImage","Knight","backgroundColor","firstAction","firstElementChild","removeChild","createElement","setProperty","square","setAttribute","appendChild","messages","children","child","para","pathLength","plural","para1","para2","getMoves"],"sourceRoot":""}